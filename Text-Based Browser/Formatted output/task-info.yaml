type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult

    import os
    import shutil

    from colorama import Fore

    import sys
    if sys.platform.startswith("win"):
        import _locale
        # pylint: disable=protected-access
        _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class TextBasedBrowserTest(StageTest):

        def generate(self):

            dir_for_files = os.path.join(os.curdir, 'tb_tabs')
            return [
                TestCase(
                    stdin='2.python-requests.org\nexit',
                    attach='requests',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='en.wikipedia.org\nwiki\nexit',
                    attach='Wikipedia',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimescom\nexit',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='bloombergcom\nexit',
                    args=[dir_for_files]
                ),
            ]

        def _check_files(self, path_for_tabs: str, right_word: str) -> bool:
            """
            Helper which checks that browser saves visited url in files and
            provides access to them.

            :param path_for_tabs: directory which must contain saved tabs
            :param right_word: Word-marker which must be in right tab
            :return: True, if right_words is present in saved tab
            """

            path, dirs, filenames = next(os.walk(path_for_tabs))

            for file in filenames:

                with open(os.path.join(path_for_tabs, file), 'r', encoding='utf-8') as tab:
                    content = tab.read()

                    if '</p>' not in content and '</script>' not in content:
                        if '</div>' not in content and right_word in content:
                            return True

            return False

        def check(self, reply, attach):

            # Incorrect URL
            if attach is None:
                if '<p>' in reply:
                    return CheckResult.wrong('You haven\'t checked was URL correct')
                else:
                    return CheckResult.correct()

            # Correct URL
            if isinstance(attach, str):
                right_word = attach

                path_for_tabs = os.path.join(os.curdir, 'tb_tabs')

                if not os.path.isdir(path_for_tabs):
                    return CheckResult.wrong("There are no directory for tabs")

                if not self._check_files(path_for_tabs, right_word):
                    return CheckResult.wrong('There are no correct saved tabs')

                shutil.rmtree(path_for_tabs)

                if not Fore.BLUE in reply:
                    return CheckResult.wrong('There are no blue refs in output')

                if '</p>' not in reply and '</div>' not in reply:
                    if right_word in reply:
                        return CheckResult.correct()

                return CheckResult.wrong('You haven\'t parsed result of request')


    TextBasedBrowserTest('browser.browser').run_tests()
  learner_created: false
- name: browser/browser.py
  visible: true
  text: "\nnytimes_com = '''\nThis New Liquid Is Magnetic, and Mesmerizing\n\nScientists\
    \ have created “soft” magnets that can flow \nand change shape, and that could\
    \ be a boon to medicine \nand robotics. (Source: New York Times)\n\n\nMost Wikipedia\
    \ Profiles Are of Men. This Scientist Is Changing That.\n\nJessica Wade has added\
    \ nearly 700 Wikipedia biographies for\n important female and minority scientists\
    \ in less than two \n years.\n\n'''\n\nbloomberg_com = '''\nThe Space Race: From\
    \ Apollo 11 to Elon Musk\n\nIt's 50 years since the world was gripped by historic\
    \ images\n of Apollo 11, and Neil Armstrong -- the first man to walk \n on the\
    \ moon. It was the height of the Cold War, and the charts\n were filled with David\
    \ Bowie's Space Oddity, and Creedence's \n Bad Moon Rising. The world is a very\
    \ different place than \n it was 5 decades ago. But how has the space race changed\
    \ since\n the summer of '69? (Source: Bloomberg)\n\n\nTwitter CEO Jack Dorsey\
    \ Gives Talk at Apple Headquarters\n\nTwitter and Square Chief Executive Officer\
    \ Jack Dorsey \n addressed Apple Inc. employees at the iPhone maker’s headquarters\n\
    \ Tuesday, a signal of the strong ties between the Silicon Valley giants.\n'''\n\
    \n# write your code here\n"
  learner_created: false
- name: browser/tb_tabs/docs.python.txt
  visible: true
  text: "3.8.2 Documentation \n      @media only screen {\n        table.full-width-table\
    \ {\n            width: 100%;\n        }\n      }\n     \n \n Navigation \n \n\
    \ \n index \n \n modules  | \n \n Python  » \n \n en \n 3.8.2 \n Documentation\
    \   »\n     \n \n \n \n \n \n \n \n \n \n \n         |\n     \n \n \n \n \n \n\
    \ \n Python 3.8.2 documentation \n \n  Welcome! This is the documentation for\
    \ Python 3.8.2.\n   \n Parts of the documentation: \n \n \n What's new in Python\
    \ 3.8? \n  or  all \"What's new\" documents  since 2.0 \n Tutorial \n start here\
    \ \n Library Reference \n keep this under your pillow \n Language Reference \n\
    \ describes syntax and language elements \n Python Setup and Usage \n how to use\
    \ Python on different platforms \n Python HOWTOs \n in-depth documents on specific\
    \ topics \n \n Installing Python Modules \n installing from the Python Package\
    \ Index & other sources \n Distributing Python Modules \n publishing modules for\
    \ installation by others \n Extending and Embedding \n tutorial for C/C++ programmers\
    \ \n Python/C API \n reference for C/C++ programmers \n FAQs \n frequently asked\
    \ questions (with answers!) \n \n \n Indices and tables: \n \n \n Global Module\
    \ Index \n quick access to all modules \n General Index \n all functions, classes,\
    \ terms \n Glossary \n the most important terms explained \n \n Search page \n\
    \ search this documentation \n Complete Table of Contents \n lists all sections\
    \ and subsections \n \n \n Meta information: \n \n \n Reporting bugs \n Contributing\
    \ to Docs \n About the documentation \n \n History and License of Python \n Copyright\
    \ \n \n \n \n \n \n \n Download \n Download these documents \n Docs by version\
    \ \n \n Python 3.9 (in development) \n Python 3.8 (stable) \n Python 3.7 (stable)\
    \ \n Python 3.6 (security-fixes) \n Python 3.5 (security-fixes) \n Python 2.7\
    \ (EOL) \n All versions \n \n Other resources \n \n PEP Index \n Beginner's Guide\
    \ \n Book List \n Audio/Visual Talks \n Python Developerâ\x80\x99s Guide \n \n\
    \ \n \n \n \n \n Navigation \n \n \n index \n \n modules  | \n \n Python  » \n\
    \ \n en \n 3.8.2 \n Documentation   »\n     \n \n \n \n \n \n \n \n \n \n \n \
    \        |\n     \n \n \n \n    ©  Copyright  2001-2020, Python Software Foundation.\n\
    \     \n\n    The Python Software Foundation is a non-profit corporation.\n Please\
    \ donate. \n \n \n\n    Last updated on Apr 21, 2020.\n     Found a bug ?\n  \
    \   \n\n    Created using  Sphinx  2.3.1.\n     \n "
  learner_created: true
feedback_link: https://hyperskill.org/projects/79/stages/441/implement
status: Solved
record: -1
